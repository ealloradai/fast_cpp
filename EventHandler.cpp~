#include <stdlib.h>
#include <syslog.h>
#include <event.h>

#include "Fast.h"
#include "EventHandler.h"
#include "Shared.h"

#define EVENT_TRIGGER    "MotionDetection"

EventHandler::EventHandler(Fast &f)
{
    fast      	  = f;
    event_handler = NULL;
    event         = NULL;
}

EventHandler::~EventHandler()
{
    close();
}

void EventHandler::close()
{
    if (event_remove(event) < 0)
    {
	syslog(LOG_CRIT, "Failed to remove event!\n");
	exit(EXIT_FAILURE);
    }

    event_handler_cleanup(event_handler);
}

void EventHandler::handle(int result, int fast_level)
{
  //TODO vedere algoritmo decision
  int motion_detected = fast.analyzeDecision(result, fast_level);

    if (motion_detected)
    {
	if (event_send(event, EVENT_ACTIVATE_DEACTIVATE, NULL) < 0)
	{
	    syslog(LOG_WARNING, "Failed to send event!\n");
	}
	else 
	{
	    syslog(LOG_INFO, "Event sent!\n");
	}
    }
}

void EventHandler::init(char *app_name)
{
    if ((event_handler = event_handler_init(app_name, EVENT_HANDLER_SEND)) == NULL) 
    {
	syslog(LOG_CRIT, "Failed to initialize event handler!\n");
	exit(EXIT_FAILURE);
    }

    if ((event = event_add(event_handler, EVENT_TRIGGER, NULL)) == NULL) 
    {
	syslog(LOG_CRIT, "Failed to add event!\n");
	close();
	exit(EXIT_FAILURE);
    }
}
